<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DataCollectorDebuggerWarning" xml:space="preserve">
    <value>DataCollector debugging is enabled. Please attach debugger to datacollector process to continue.</value>
  </data>
  <data name="DiscovererInstantiationException" xml:space="preserve">
    <value>Exception occurred while instantiating discoverer : {0}</value>
  </data>
  <data name="DuplicateAdaptersFound" xml:space="preserve">
    <value>Multiple test adapters with the same uri '{0}' were found. Ignoring adapter '{1}'. Please uninstall the conflicting adapter(s) to avoid this warning.</value>
    <comment>{0} is the unique identifier of test adapter. {1} is the name of the test adapter that shares a unique identifier with a previously loaded adapter.</comment>
  </data>
  <data name="DuplicateSource" xml:space="preserve">
    <value>Ignoring the specified duplicate source '{0}'.</value>
  </data>
  <data name="ExceptionFromLoadTests" xml:space="preserve">
    <value>An exception occurred while test discoverer '{0}' was loading tests. Exception: {1}</value>
  </data>
  <data name="ExceptionFromRunTests" xml:space="preserve">
    <value>An exception occurred while invoking executor '{0}': {1}</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>Could not find file {0}.</value>
  </data>
  <data name="HostDebuggerWarning" xml:space="preserve">
    <value>Host debugging is enabled. Please attach debugger to testhost process to continue.</value>
    <comment>Host, testhost are key words, it should not be localized</comment>
  </data>
  <data name="IgnoringExecutorAsNoDefaultExecutorUriAttribute" xml:space="preserve">
    <value>Ignoring the test executor corresponding to test discoverer {0} because the discoverer does not have the DefaultExecutorUri attribute . You might need to re-install the test adapter add-in.</value>
  </data>
  <data name="InitializationFailed" xml:space="preserve">
    <value>Failed to initialize client proxy: could not connect to test process.</value>
  </data>
  <data name="LaunchDebugProcessNotAllowedForANonDebugRun" xml:space="preserve">
    <value>This operation is not allowed in the context of a non-debug run.</value>
  </data>
  <data name="NoDotnetExeFound" xml:space="preserve">
    <value>Could not find {0}. Make sure that the dotnet is installed on the machine.</value>
  </data>
  <data name="NoMatchingExecutor" xml:space="preserve">
    <value>Could not find test executor with URI '{0}'.  Make sure that the test executor is installed and supports .net runtime version {1}.</value>
    <comment>{0} - Executor uri String {1}-  Version - .net Version Eg:-2.0.50727.00</comment>
  </data>
  <data name="NoValidSourceFoundForDiscovery" xml:space="preserve">
    <value>None of the specified source(s) '{0}' is valid. Fix the above errors/warnings and then try again. </value>
  </data>
  <data name="StringSeperator" xml:space="preserve">
    <value>, </value>
  </data>
  <data name="TesthostDiagLogOutputFile" xml:space="preserve">
    <value>Logging TestHost Diagnostics in file: {0}</value>
  </data>
  <data name="TestHostExitedWithError" xml:space="preserve">
    <value>Testhost process exited with error: {0}. Please check the diagnostic logs for more information.</value>
  </data>
  <data name="TestRunFailed_NoDiscovererFound_NoTestsAreAvailableInTheSources" xml:space="preserve">
    <value>No test is available in {0}. Make sure that test discoverer &amp; executors are registered and platform &amp; framework version settings are appropriate and try again.</value>
  </data>
  <data name="UnsupportedPropertiesInTestCaseFilter" xml:space="preserve">
    <value>No tests matched the filter because it contains one or more properties that are not valid ({0}). Specify filter expression containing valid properties ({1}).</value>
  </data>
  <data name="FailedToLaunchTestHost" xml:space="preserve">
    <value>Failed to launch testhost with error: {0}</value>
  </data>
  <data name="ExecutionThreadApartmentStateNotSupportedForFramework" xml:space="preserve">
    <value>ExecutionThreadApartmentState option not supported for framework: {0}.</value>
  </data>
  <data name="OldTestHostIsGettingUsed" xml:space="preserve">
    <value>You are using an older version of Microsoft.NET.Test.Sdk. Kindly move to a version equal or greater than 15.3.0.</value>
  </data>
  <data name="NonExistingExtensions" xml:space="preserve">
    <value>Could not find extensions: {0}</value>
  </data>
  <data name="DeprecatedAdapterPath" xml:space="preserve">
    <value>Adapter lookup is being changed, please follow https://github.com/Microsoft/vstest-docs/blob/main/RFCs/0022-User-Specified-TestAdapter-Lookup.md#roadmap for more details.</value>
  </data>
  <data name="NoTestsAvailableForGivenTestCaseFilter" xml:space="preserve">
    <value>No test matches the given testcase filter `{0}` in {1}</value>
  </data>
  <data name="TestDiscoveryCancelled" xml:space="preserve">
    <value>Discovery of tests cancelled.</value>
  </data>
  <data name="AttachDebuggerToDefaultTestHostFailure" xml:space="preserve">
    <value>Cannot attach the debugger to the default test host with process ID: {0}.</value>
  </data>
  <data name="AccessDenied" xml:space="preserve">
    <value>{0} Access denied while trying to create "TestResults" folder in mentioned location. You are getting this exception because you are running vstest.console.exe from a folder which requires having write access. To solve the issue: please  run vstest.console.exe from a folder where you have write privileges.</value>
  </data>
  <data name="NoAvailableProxyForDeque" xml:space="preserve">
    <value>Could not find an available proxy to deque.</value>
  </data>
  <data name="NoSuchProxyId" xml:space="preserve">
    <value>Proxy with id {0} is not managed by the current session manager.</value>
  </data>
  <data name="ProxyIsAlreadyAvailable" xml:space="preserve">
    <value>Proxy with id {0} is already available and cannot be re-enqueued.</value>
  </data>
</root>