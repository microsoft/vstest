#nullable enable
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.AttachDebuggerToProcess(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.Interfaces.AttachDebuggerInfo! attachDebuggerInfo) -> bool
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.Close() -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.ConnectionInfo.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.TestHostConnectionInfo
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.ConnectionInfo.set -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.DiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs! discoveryCompleteEventArgs, System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase!>? lastChunk) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.Dispose() -> void
virtual Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.Dispose(bool disposing) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.LaunchProcessWithDebuggerAttached(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo? testProcessStartInfo) -> int
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.OnMessageReceived(object? sender, Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.MessageReceivedEventArgs! messageReceivedArgs) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.ProcessRequests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.ITestHostManagerFactory! testHostManagerFactory) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.SendExecutionComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCompleteEventArgs! testRunCompleteArgs, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs? lastChunkArgs, System.Collections.Generic.ICollection<Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet!>? runContextAttachments, System.Collections.Generic.ICollection<string!>? executorUris) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.SendLog(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel messageLevel, string? message) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.SendTestCases(System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase!>? discoveredTestCases) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.SendTestRunStatistics(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunChangedEventArgs? testRunChangedArgs) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.TestRequestHandler() -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.TestRequestHandler(Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataSerializer! dataSerializer, Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ICommunicationEndpointFactory! communicationEndpointFactory) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.TestRequestHandler(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestHostConnectionInfo connectionInfo, Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ICommunicationEndpointFactory! communicationEndpointFactory, Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.IDataSerializer! dataSerializer, Microsoft.VisualStudio.TestPlatform.Utilities.JobQueue<System.Action!>! jobQueue, System.Action<Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Message!>! onLaunchAdapterProcessWithDebuggerAttachedAckReceived, System.Action<Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Message!>! onAttachDebuggerAckRecieved) -> void
Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.WaitForRequestSenderConnection(int connectionTimeout) -> bool
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.InIsolation.get -> bool
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.IsBeingDebugged.get -> bool
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.IsDataCollectionEnabled.get -> bool
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.KeepAlive.get -> bool
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.RunContext() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.SolutionDirectory.get -> string?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Adapter.RunContext.TestRunDirectory.get -> string?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.Abort() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2! eventHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.Close() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.DiscoverTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria! discoveryCriteria, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2! eventHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.HandleDiscoveredTests(System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase!>? discoveredTestCases) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.HandleDiscoveryComplete(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCompleteEventArgs! discoveryCompleteEventArgs, System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase!>? lastChunk) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.HandleLogMessage(Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel level, string? message) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.HandleRawMessage(string! rawMessage) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.Initialize(bool skipDefaultAdapters) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.ProxyDiscoveryManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData, Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender! testRequestSender, Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider! testHostManager) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.ProxyDiscoveryManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo! testSessionInfo, System.Func<string!, Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager!, Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager!>! proxyOperationManagerCreator) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.CancellationTokenSource.get -> System.Threading.CancellationTokenSource!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.CancellationTokenSource.set -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.Id.get -> int
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.Id.set -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.ProxyOperationManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData? requestData, Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender! requestSender, Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider! testHostManager, Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework! testhostManagerFramework) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.ProxyOperationManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData? requestData, Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender! requestSender, Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider! testHostManager, Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework? testhostManagerFramework, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IBaseProxy? baseProxy) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.RemoveNodesFromRunsettingsIfRequired(string? runsettingsXml, System.Action<Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging.TestMessageLevel, string!>! logMessage) -> string?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.RequestData.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.RequestData.set -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.RequestSender.get -> Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.RequestSender.set -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.TestHostManager.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.TestHostManager.set -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.TestHostManagerFramework.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.ProxyOperationManagerWithDataCollection(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData, Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.Interfaces.ITestRequestSender! requestSender, Microsoft.VisualStudio.TestPlatform.ObjectModel.Host.ITestRuntimeProvider! testHostManager, Microsoft.VisualStudio.TestPlatform.ObjectModel.Framework! testHostManagerFramework, Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager! proxyDataCollectionManager) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo.RunSettings.get -> string?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo.Shared.get -> bool
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo.SourceDetails.get -> System.Collections.Generic.List<Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail!>!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo.TestRuntimeProviderInfo(System.Type? type, bool shared, string? runSettings, System.Collections.Generic.List<Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail!>! sourceDetails) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo.Type.get -> System.Type?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Constants
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Constants.Constants() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.AreTestCaseLevelEventsRequired.get -> bool
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.DataCollectionEventsPort.get -> int
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.DataCollectionParameters(bool areTestCaseLevelEventsRequired, System.Collections.Generic.IDictionary<string!, string?>? environmentVariables, int dataCollectionEventsPort) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.EnvironmentVariables.get -> System.Collections.Generic.IDictionary<string!, string?>?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult.Attachments.get -> System.Collections.ObjectModel.Collection<Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet!>?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult.DataCollectionResult(System.Collections.ObjectModel.Collection<Microsoft.VisualStudio.TestPlatform.ObjectModel.AttachmentSet!>? attachments, System.Collections.ObjectModel.Collection<Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector!>? invokedDataCollectors) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult.InvokedDataCollectors.get -> System.Collections.ObjectModel.Collection<Microsoft.VisualStudio.TestPlatform.ObjectModel.InvokedDataCollector!>?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectorsSettingsProvider
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IDataCollectorsSettingsProvider.Settings.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollectionRunSettings!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.AfterTestRunEnd(bool isCanceled, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler! runEventsHandler) -> Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionResult!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.BeforeTestRunStart(bool resetDataCollectors, bool isRunStartingNow, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler! runEventsHandler) -> Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.Initialize() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.SettingsXml.get -> string?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.Sources.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.Interfaces.IProxyDataCollectionManager.TestHostLaunched(int processId) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryContext
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryContext.DiscoveryContext() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryContext.GetTestCaseFilter(System.Collections.Generic.IEnumerable<string!>? supportedProperties, System.Func<string!, Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProperty?>! propertyProvider) -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.ITestCaseFilterExpression?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryContext.RunSettings.get -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter.IRunSettings?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.Abort() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2! eventHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.DiscoverTests(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria! discoveryCriteria, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2! eventHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.DiscoveryManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.DiscoveryManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData, Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource! testPlatformEventSource) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Discovery.DiscoveryManager.Initialize(System.Collections.Generic.IEnumerable<string!>? pathToAdditionalExtensions, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestDiscoveryEventsHandler2? eventHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.Abort(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler! testRunEventsHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.Cancel(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler! testRunEventsHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.ExecutionManager(Microsoft.VisualStudio.TestPlatform.CoreUtilities.Tracing.Interfaces.ITestPlatformEventSource! testPlatformEventSource, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.ExecutionManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.Initialize(System.Collections.Generic.IEnumerable<string!>? pathToAdditionalExtensions, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler? testMessageEventsHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.StartTestRun(System.Collections.Generic.Dictionary<string!, System.Collections.Generic.IEnumerable<string!>!>! adapterSourceMap, string? package, string? runSettings, Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext! testExecutionContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler? testCaseEventsHandler, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler! runEventsHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Execution.ExecutionManager.StartTestRun(System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase!>! tests, string? package, string? runSettings, Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ClientProtocol.TestExecutionContext! testExecutionContext, Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestCaseEventsHandler? testCaseEventsHandler, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IInternalTestRunEventsHandler! runEventsHandler) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.ProxyTestSessionManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria! criteria, int maxTesthostCount, System.Func<Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo!, Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager?>! proxyCreator, System.Collections.Generic.List<Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.TestRuntimeProviderInfo!>! runtimeProviders) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetDiscoveryManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.DiscoveryCriteria! discoveryCriteria, System.Collections.Generic.IDictionary<string!, Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail!>! sourceToSourceDetailMap, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger! warningLogger) -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyDiscoveryManager!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetExecutionManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestRunCriteria! testRunCriteria, System.Collections.Generic.IDictionary<string!, Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail!>! sourceToSourceDetailMap, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger! warningLogger) -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyExecutionManager!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetExtensionManager() -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestExtensionManager!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetLoggerManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData) -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.ITestLoggerManager!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.GetTestSessionManager(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.StartTestSessionCriteria! testSessionCriteria, System.Collections.Generic.IDictionary<string!, Microsoft.VisualStudio.TestPlatform.ObjectModel.SourceDetail!>! sourceToSourceDetailMap, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IWarningLogger! warningLogger) -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.IProxyTestSessionManager?
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.TestEngine() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestEngine.TestEngine(Microsoft.VisualStudio.TestPlatform.Common.Hosting.TestRuntimeProviderManager! testHostProviderManager, Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper! processHelper) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestExtensionManager
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestExtensionManager.ClearExtensions() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestExtensionManager.TestExtensionManager() -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestExtensionManager.UseAdditionalExtensions(System.Collections.Generic.IEnumerable<string!>? pathToAdditionalExtensions, bool skipExtensionFilters) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory.GetDiscoveryManager() -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IDiscoveryManager!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory.GetExecutionManager() -> Microsoft.VisualStudio.TestPlatform.ObjectModel.Engine.TesthostProtocol.IExecutionManager!
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestHostManagerFactory.TestHostManagerFactory(bool telemetryOptedIn) -> void
Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool
override Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.Initialize(bool skipDefaultAdapters) -> void
override Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.SetupChannel(System.Collections.Generic.IEnumerable<string!>! sources, string! runSettings, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler! eventHandler) -> bool
override Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManagerWithDataCollection.UpdateTestProcessStartInfo(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo! testProcessStartInfo) -> Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo!
static Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters.CreateDefaultParameterInstance() -> Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.DataCollection.DataCollectionParameters!
static Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.Instance.get -> Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool!
virtual Microsoft.VisualStudio.TestPlatform.CommunicationUtilities.TestRequestHandler.InitializeCommunication() -> void
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyDiscoveryManager.UpdateTestProcessStartInfo(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo! testProcessStartInfo) -> Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo!
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.Close() -> void
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.Initialize(bool skipDefaultAdapters) -> void
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.SetupChannel(System.Collections.Generic.IEnumerable<string!>! sources, string! runSettings, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestMessageEventHandler! eventHandler) -> bool
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.SetupChannel(System.Collections.Generic.IEnumerable<string!>! sources, string? runSettings) -> bool
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.UpdateTestProcessStartInfo(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo! testProcessStartInfo) -> Microsoft.VisualStudio.TestPlatform.ObjectModel.TestProcessStartInfo!
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.DequeueProxy(string! source, string? runSettings) -> Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager!
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.EnqueueProxy(int proxyId) -> bool
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.StartSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.ITestSessionEventsHandler! eventsHandler, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData) -> bool
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager.StopSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData) -> bool
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.AddSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo! testSessionInfo, Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.ProxyTestSessionManager! proxyManager) -> bool
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.KillSession(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo! testSessionInfo, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData) -> bool
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.ReturnProxy(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo! testSessionInfo, int proxyId) -> bool
virtual Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.TestSessionPool.TryTakeProxy(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestSessionInfo! testSessionInfo, string! source, string? runSettings, Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.IRequestData! requestData) -> Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager?
