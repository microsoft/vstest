<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!--
      This is targetting .NET Framework only on purpose. We want the exe, and we want it to run as different architecture.
      Using .NET Framework for this makes it much easier, than .NET because we don't have to lookup the correct arch of the runtime.
      Alternative to this would be using .NET AOT, but it makes it harder to just build, since you need to publish to get the exe.
    -->
    <TargetFrameworks>$(NetFrameworkMinimum)</TargetFrameworks>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <Prefer32Bit>false</Prefer32Bit>
    <OutputType>Exe</OutputType>
    <IsTestProject>false</IsTestProject>
    <RuntimeIdentifier Condition="'$(DotNetBuildSourceOnly)' != 'true'">win7-x64</RuntimeIdentifier>
    <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
    <ExcludeFromSourceOnlyBuild>true</ExcludeFromSourceOnlyBuild>
    <!--
      NETSDK1201: For projects targeting .NET 8.0 and higher, specifying a RuntimeIdentifier will no longer produce a
      self contained app by default. To continue building self-contained apps, set the SelfContained property to true
      or use the -\-self-contained argument.
      -->
    <MSBuildWarningsAsMessages>NETSDK1201</MSBuildWarningsAsMessages>
    <NoWarn>$(NoWarn);NETSDK1201</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="..\DumpMinitool.x86\Program.cs" Link="Program.cs" />
    <Compile Include="..\..\Microsoft.TestPlatform.Extensions.BlameDataCollector\MiniDumpWriteDump.cs" Link="MiniDumpWriteDump.cs" />
  </ItemGroup>

  <ItemGroup>
    <!-- API that is common to all frameworks that we build for. -->
    <AdditionalFiles Include="..\DumpMinitool.x86\PublicAPI\PublicAPI.Shipped.txt" Link="PublicAPI\PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="..\DumpMinitool.x86\PublicAPI\PublicAPI.Unshipped.txt" Link="PublicAPI\PublicAPI.Unshipped.txt" />
  </ItemGroup>

</Project>
