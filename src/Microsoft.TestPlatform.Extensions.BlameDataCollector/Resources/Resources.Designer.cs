//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.TestPlatform.Extensions.BlameDataCollector.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.TestPlatform.Extensions.BlameDataCollector.Resources.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The active Test Run was aborted because the host process exited unexpectedly. Please inspect the call stack above, if available, to get more information about where the exception originated from.
        ///The test running when the crash occurred: 
        ///{0}
        ///This test may, or may not be the source of the crash..
        /// </summary>
        internal static string AbortedTestRun {
            get {
                return ResourceManager.GetString("AbortedTestRun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The blame parameter key specified {0} is not valid. Ignoring this key..
        /// </summary>
        internal static string BlameParameterKeyIncorrect {
            get {
                return ResourceManager.GetString("BlameParameterKeyIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The blame parameter key {0}, has incorrect value: {1}. Supported values are: {2}.
        /// </summary>
        internal static string BlameParameterValueIncorrect {
            get {
                return ResourceManager.GetString("BlameParameterValueIncorrect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collect dump was enabled but no dump file was generated..
        /// </summary>
        internal static string DumpFileNotGeneratedErrorMessage {
            get {
                return ResourceManager.GetString("DumpFileNotGeneratedErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dumping {0} - {1}.
        /// </summary>
        internal static string Dumping {
            get {
                return ResourceManager.GetString("Dumping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dumping this process tree (from bottom).
        /// </summary>
        internal static string DumpingTree {
            get {
                return ResourceManager.GetString("DumpingTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified inactivity time of {0} {1} has elapsed. Collecting hang dumps from testhost and its child processes.
        /// </summary>
        internal static string InactivityTimeout {
            get {
                return ResourceManager.GetString("InactivityTimeout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to minutes.
        /// </summary>
        internal static string Minutes {
            get {
                return ResourceManager.GetString("Minutes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All tests finished running, Sequence file will not be generated.
        /// </summary>
        internal static string NotGeneratingSequenceFile {
            get {
                return ResourceManager.GetString("NotGeneratingSequenceFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not start process dump: {0}.
        /// </summary>
        internal static string ProcDumpCouldNotStart {
            get {
                return ResourceManager.GetString("ProcDumpCouldNotStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required environment variable PROCDUMP_PATH was null or empty. Set PROCDUMP_PATH to path of folder containing appropriate procdump executable..
        /// </summary>
        internal static string ProcDumpEnvVarEmpty {
            get {
                return ResourceManager.GetString("ProcDumpEnvVarEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} could not be found, please make sure that the executable is available on PATH. Alternatively set PROCDUMP_PATH environment variable to a directory that contains {0} executable.
        /// </summary>
        internal static string ProcDumpNotFound {
            get {
                return ResourceManager.GetString("ProcDumpNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CollectDump was enabled but dump file was not generated..
        /// </summary>
        internal static string ProcDumpNotGenerated {
            get {
                return ResourceManager.GetString("ProcDumpNotGenerated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to seconds.
        /// </summary>
        internal static string Seconds {
            get {
                return ResourceManager.GetString("Seconds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected value &apos;{0}&apos; provided as timeout. Please provide a value in this format: 1.5h / 90m / 5400s / 5400000ms / 5400000.
        /// </summary>
        internal static string UnexpectedValueForInactivityTimespanValue {
            get {
                return ResourceManager.GetString("UnexpectedValueForInactivityTimespanValue", resourceCulture);
            }
        }
    }
}
