<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- NU1702 suppresses warning about DumpMinitool being .NET Framework reference imported to a .NET project.
    Unfortunately this can't be suppressed at single ProjectReference. Neither completely suppressed by using NoWarn.
    Workaround is documented here: https://github.com/NuGet/Home/issues/8093, but this syntax and placement would be preferred:
    https://github.com/dotnet/core/issues/869
    -->
    <MSBuildWarningsAsMessages>$(MSBuildWarningsAsMessages);NU1702</MSBuildWarningsAsMessages>
    <!-- MSB3270 Suppress warnings about testhost being x64 (AMD64)/x86 when imported into AnyCPU (MSIL) projects. -->
    <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
    <!-- MSB3276 Suppress warnings about conflicts between different versions of the same dependent assembly -->
    <MSBuildWarningsAsMessages>$(MSBuildWarningsAsMessages);MSB3276</MSBuildWarningsAsMessages>
  </PropertyGroup>
  <Import Project="$(RepoRoot)src\Microsoft.TestPlatform.Execution.Shared\Microsoft.TestPlatform.Execution.Shared.projitems" Label="Shared" />

  <PropertyGroup Label="Configuration">
    <RootNamespace>Microsoft.TestPlatform.Extensions.BlameDataCollector</RootNamespace>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyName>Microsoft.TestPlatform.Extensions.BlameDataCollector</AssemblyName>
    <TargetFrameworks>$(NetFrameworkRunnerTargetFramework);$(ExtensionTargetFrameworks)</TargetFrameworks>
    <IsTestProject>false</IsTestProject>
    <!-- to copy the netcore.client dependency to bin folder on build -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <UseBannedApiAnalyzers>true</UseBannedApiAnalyzers>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="$(RepoRoot)src\Microsoft.TestPlatform.TestHostProvider\Properties\TestExtensionTypesAttribute.cs" Link="Properties\TestExtensionTypesAttribute.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="$(RepoRoot)src\Microsoft.TestPlatform.ObjectModel\Microsoft.TestPlatform.ObjectModel.csproj" />
    <ProjectReference Include="$(RepoRoot)src\Microsoft.TestPlatform.CoreUtilities\Microsoft.TestPlatform.CoreUtilities.csproj" />
  </ItemGroup>
  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' != 'true'">
    <!-- We are forcing the reference here to .NET Framework project for both .NET and .NET Framework builds.
    This is because we are offloading the dumping to this tool on Windows, and we need this tool to run anywhere with any selected architecture, and using .NET Framework (or eventually .NET Native)
    prevents us from having to lookup the correct .NET runtime. -->
    <ProjectReference Include="$(RepoRoot)src\DataCollectors\DumpMinitool\DumpMinitool.csproj" SetTargetFramework="TargetFramework=$(NetFrameworkMinimum)" />
    <ProjectReference Include="$(RepoRoot)src\DataCollectors\DumpMinitool.x86\DumpMinitool.x86.csproj" SetTargetFramework="TargetFramework=$(NetFrameworkMinimum)" />
    <ProjectReference Include="$(RepoRoot)src\DataCollectors\DumpMinitool.arm64\DumpMinitool.arm64.csproj" SetTargetFramework="TargetFramework=$(NetFrameworkMinimum)" />
  </ItemGroup>
  <ItemGroup Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', '$(NetFrameworkMinimum)'))">
    <Reference Include="System" />
    <Reference Include="System.Runtime" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.Diagnostics.NETCore.Client" Version="$(MicrosoftDiagnosticsNETCoreClientVersion)" />
  </ItemGroup>
  <ItemGroup>
    <Compile Update="NullableHelpers.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>NullableHelpers.tt</DependentUpon>
    </Compile>
    <Compile Update="Resources\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Update="Resources\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <AdditionalFiles Include="BannedSymbols.txt" />
    <!-- API that is common to all frameworks that we build for. -->
    <AdditionalFiles Include="PublicAPI/PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="PublicAPI/PublicAPI.Unshipped.txt" />
    <!-- Framework specific API -->
    <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="PublicAPI/$(TargetFramework)/PublicAPI.Unshipped.txt" />
  </ItemGroup>
  <ItemGroup>
    <None Update="NullableHelpers.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>NullableHelpers.cs</LastGenOutput>
    </None>
  </ItemGroup>
  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

</Project>
