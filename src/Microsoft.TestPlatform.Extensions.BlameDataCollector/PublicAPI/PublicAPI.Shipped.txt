#nullable enable
const Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameLogger.ExtensionUri = "logger://Microsoft/TestPlatform/Extensions/Blame/v1" -> string!
const Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameLogger.FriendlyName = "Blame" -> string!
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameCollector
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameCollector.BlameCollector() -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameCollector.GetTestExecutionEnvironmentVariables() -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string!, string!>>!
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameLogger
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameLogger.BlameLogger() -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameLogger.BlameLogger(Microsoft.VisualStudio.TestPlatform.Utilities.IOutput! output, Microsoft.TestPlatform.Extensions.BlameDataCollector.IBlameReaderWriter! blameReaderWriter) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameLogger.Initialize(Microsoft.VisualStudio.TestPlatform.ObjectModel.Client.TestLoggerEvents! events, string? testRunDictionary) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.BlameTestObject() -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.BlameTestObject(Microsoft.VisualStudio.TestPlatform.ObjectModel.TestCase! testCase) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.BlameTestObject(string! fullyQualifiedName, System.Uri! executorUri, string! source) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.DisplayName.get -> string?
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.DisplayName.set -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.ExecutorUri.get -> System.Uri?
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.ExecutorUri.set -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.FullyQualifiedName.get -> string?
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.FullyQualifiedName.set -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.Id.get -> System.Guid
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.Id.set -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.IsCompleted.get -> bool
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.IsCompleted.set -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.Source.get -> string?
Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject.Source.set -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption
Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption.Full = 0 -> Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption
Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption.Mini = 2 -> Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption
Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption.WithHeap = 1 -> Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption
Microsoft.TestPlatform.Extensions.BlameDataCollector.IBlameReaderWriter
Microsoft.TestPlatform.Extensions.BlameDataCollector.IBlameReaderWriter.ReadTestSequence(string! filePath) -> System.Collections.Generic.List<Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject!>!
Microsoft.TestPlatform.Extensions.BlameDataCollector.IBlameReaderWriter.WriteTestSequence(System.Collections.Generic.List<System.Guid>! testSequence, System.Collections.Generic.Dictionary<System.Guid, Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject!>! testObjectDictionary, string! filePath) -> string!
Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumper
Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumper.AttachToTargetProcess(int processId, string! outputDirectory, Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption dumpType, bool collectAlways, System.Action<string!>! logWarning) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumper.DetachFromTargetProcess(int processId) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumper.GetDumpFiles(bool processCrashed) -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumper.WaitForDumpToFinish() -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumperFactory
Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumperFactory.Create(string! targetFramework) -> Microsoft.TestPlatform.Extensions.BlameDataCollector.ICrashDumper!
Microsoft.TestPlatform.Extensions.BlameDataCollector.IHangDumper
Microsoft.TestPlatform.Extensions.BlameDataCollector.IHangDumper.Dump(int processId, string! outputDirectory, Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption dumpType) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.IHangDumperFactory
Microsoft.TestPlatform.Extensions.BlameDataCollector.IHangDumperFactory.Create(string! targetFramework) -> Microsoft.TestPlatform.Extensions.BlameDataCollector.IHangDumper!
Microsoft.TestPlatform.Extensions.BlameDataCollector.IHangDumperFactory.LogWarning.get -> System.Action<string!>?
Microsoft.TestPlatform.Extensions.BlameDataCollector.IHangDumperFactory.LogWarning.set -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.IInactivityTimer
Microsoft.TestPlatform.Extensions.BlameDataCollector.IInactivityTimer.ResetTimer(System.TimeSpan inactivityTimespan) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.InactivityTimer
Microsoft.TestPlatform.Extensions.BlameDataCollector.InactivityTimer.Dispose() -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.InactivityTimer.InactivityTimer(System.Action! timerCallback) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.InactivityTimer.ResetTimer(System.TimeSpan inactivityTimespan) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.INativeMethodsHelper
Microsoft.TestPlatform.Extensions.BlameDataCollector.INativeMethodsHelper.Is64Bit(nint processHandle) -> bool
Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcDumpArgsBuilder
Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcDumpArgsBuilder.BuildHangBasedProcDumpArgs(int processId, string! filename, bool isFullDump) -> string!
Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcDumpArgsBuilder.BuildTriggerBasedProcDumpArgs(int processId, string! filename, System.Collections.Generic.IEnumerable<string!>! procDumpExceptionsList, bool isFullDump) -> string!
Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcessDumpUtility
Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcessDumpUtility.DetachFromTargetProcess(int targetProcessId) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcessDumpUtility.GetDumpFiles(bool warnOnNoDumpFiles, bool processCrashed) -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcessDumpUtility.StartHangBasedProcessDump(int processId, string! testResultsDirectory, bool isFullDump, string! targetFramework, System.Action<string!>? logWarning = null) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.IProcessDumpUtility.StartTriggerBasedProcessDump(int processId, string! testResultsDirectory, bool isFullDump, string! targetFramework, bool collectAlways, System.Action<string!>! logWarning) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpArgsBuilder
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpArgsBuilder.BuildHangBasedProcDumpArgs(int processId, string! filename, bool isFullDump) -> string!
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpArgsBuilder.BuildTriggerBasedProcDumpArgs(int processId, string! filename, System.Collections.Generic.IEnumerable<string!>! procDumpExceptionsList, bool isFullDump) -> string!
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpArgsBuilder.ProcDumpArgsBuilder() -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper.AttachToTargetProcess(int processId, string! outputDirectory, Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption dumpType, bool collectAlways, System.Action<string!>! logWarning) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper.DetachFromTargetProcess(int targetProcessId) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper.Dump(int processId, string! outputDirectory, Microsoft.TestPlatform.Extensions.BlameDataCollector.DumpTypeOption dumpType) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper.GetDumpFiles(bool processCrashed) -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper.OutputReceivedCallback.get -> System.Action<object?, string?>!
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper.ProcDumpDumper() -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper.ProcDumpDumper(Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IProcessHelper! processHelper, Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper! fileHelper, Microsoft.VisualStudio.TestPlatform.PlatformAbstractions.Interfaces.IEnvironment! environment) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.ProcDumpDumper.WaitForDumpToFinish() -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.Win32NamedEvent
Microsoft.TestPlatform.Extensions.BlameDataCollector.Win32NamedEvent.Set() -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.Win32NamedEvent.Win32NamedEvent(string! eventName) -> void
Microsoft.TestPlatform.Extensions.BlameDataCollector.XmlReaderWriter
Microsoft.TestPlatform.Extensions.BlameDataCollector.XmlReaderWriter.ReadTestSequence(string! filePath) -> System.Collections.Generic.List<Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject!>!
Microsoft.TestPlatform.Extensions.BlameDataCollector.XmlReaderWriter.WriteTestSequence(System.Collections.Generic.List<System.Guid>! testSequence, System.Collections.Generic.Dictionary<System.Guid, Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameTestObject!>! testObjectDictionary, string! filePath) -> string!
Microsoft.TestPlatform.Extensions.BlameDataCollector.XmlReaderWriter.XmlReaderWriter(Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces.IFileHelper! fileHelper) -> void
override Microsoft.TestPlatform.Extensions.BlameDataCollector.BlameCollector.Initialize(System.Xml.XmlElement? configurationElement, Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEvents! events, Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionSink! dataSink, Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionLogger! logger, Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection.DataCollectionEnvironmentContext? environmentContext) -> void
