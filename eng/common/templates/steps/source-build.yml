# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# The Task 'PublishPipelineArtifact@1' has been converted to an output named 'Publish BuildLogs' in the templateContext section.
parameters:
  platform: {}
steps:
- script: |
    set -x
    df -h
    # If building on the internal project, the artifact feeds variable may be available (usually only if needed)
    # In that case, call the feed setup script to add internal feeds corresponding to public ones.
    # In addition, add an msbuild argument to copy the WIP from the repo to the target build location.
    # This is because SetupNuGetSources.sh will alter the current NuGet.config file, and we need to preserve those
    # changes.
    internalRestoreArgs=
    if [ '$(dn-bot-dnceng-artifact-feeds-rw)' != '$''(dn-bot-dnceng-artifact-feeds-rw)' ]; then
      # Temporarily work around https://github.com/dotnet/arcade/issues/7709
      chmod +x $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
      $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh $(Build.SourcesDirectory)/NuGet.config $(dn-bot-dnceng-artifact-feeds-rw)
      internalRestoreArgs='/p:CopyWipIntoInnerSourceBuildRepo=true'
      # The 'Copy WIP' feature of source build uses git stash to apply changes from the original repo.
      # This only works if there is a username/email configured, which won't be the case in most CI runs.
      git config --get user.email
      if [ $? -ne 0 ]; then
        git config user.email dn-bot@microsoft.com
        git config user.name dn-bot
      fi
    fi
    # If building on the internal project, the internal storage variable may be available (usually only if needed)
    # In that case, add variables to allow the download of internal runtimes if the specified versions are not found
    # in the default public locations.
    internalRuntimeDownloadArgs=
    if [ '$(dotnetbuilds-internal-container-read-token-base64)' != '$''(dotnetbuilds-internal-container-read-token-base64)' ]; then
      internalRuntimeDownloadArgs='/p:DotNetRuntimeSourceFeed=https://dotnetbuilds.blob.core.windows.net/internal /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64) --runtimesourcefeed https://dotnetbuilds.blob.core.windows.net/internal --runtimesourcefeedkey $(dotnetbuilds-internal-container-read-token-base64)'
    fi
    buildConfig=Release
    # Check if AzDO substitutes in a build config from a variable, and use it if so.
    if [ '$(_BuildConfig)' != '$''(_BuildConfig)' ]; then
      buildConfig='$(_BuildConfig)'
    fi
    officialBuildArgs=
    if [ '${{ and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}' = 'True' ]; then
      officialBuildArgs='/p:DotNetPublishUsingPipelines=true /p:OfficialBuildId=$(BUILD.BUILDNUMBER)'
    fi
    targetRidArgs=
    if [ '${{ parameters.platform.targetRID }}' != '' ]; then
      targetRidArgs='/p:TargetRid=${{ parameters.platform.targetRID }}'
    fi
    runtimeOsArgs=
    if [ '${{ parameters.platform.runtimeOS }}' != '' ]; then
      runtimeOsArgs='/p:RuntimeOS=${{ parameters.platform.runtimeOS }}'
    fi
    baseOsArgs=
    if [ '${{ parameters.platform.baseOS }}' != '' ]; then
      baseOsArgs='/p:BaseOS=${{ parameters.platform.baseOS }}'
    fi
    publishArgs=
    if [ '${{ parameters.platform.skipPublishValidation }}' != 'true' ]; then
      publishArgs='--publish'
    fi
    assetManifestFileName=SourceBuild_RidSpecific.xml
    if [ '${{ parameters.platform.name }}' != '' ]; then
      assetManifestFileName=SourceBuild_${{ parameters.platform.name }}.xml
    fi
    ${{ coalesce(parameters.platform.buildScript, './build.sh') }} --ci \
      --configuration $buildConfig \
      --restore --build --pack $publishArgs -bl \
      $officialBuildArgs \
      $internalRuntimeDownloadArgs \
      $internalRestoreArgs \
      $targetRidArgs \
      $runtimeOsArgs \
      $baseOsArgs \
      /p:SourceBuildNonPortable=${{ parameters.platform.nonPortable }} \
      /p:ArcadeBuildFromSource=true \
      /p:DotNetBuildSourceOnly=true \
      /p:DotNetBuildRepo=true \
      /p:AssetManifestFileName=$assetManifestFileName
  displayName: Build
- task: CopyFiles@2
  displayName: Prepare BuildLogs staging directory
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      **/*.log
      **/*.binlog
      artifacts/sb/prebuilt-report/**
    TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
    CleanTargetFolder: true
  continueOnError: true
  condition: succeededOrFailed()
- task: ComponentGovernanceComponentDetection@0
  displayName: Component Detection (Exclude upstream cache)
  inputs:
    ignoreDirectories: '$(Build.SourcesDirectory)/artifacts/sb/src/artifacts/obj/source-built-upstream-cache'