<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <TestPlatformRoot>$(MSBuildThisFileDirectory)..\..\</TestPlatformRoot>
    <!-- This version is read by vsts-prebuild.ps1 and is a base for the current version, this should be updated
    at the start of new iteration to the goal number. This is also used to version the local packages. This version needs to be statically
    readable when we read the file as xml, don't move it to a .props file, unless you change the build server process -->
    <TPVersionPrefix>17.4.1</TPVersionPrefix>
    <LangVersion>preview</LangVersion>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>preview</AnalysisLevel>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
    <Nullable>enable</Nullable>
  </PropertyGroup>
  <PropertyGroup>
    <!-- Versioning is defined from the build script. Use a default dev build if it's not defined.
         Sets the AssemblyVersion, AssemblyFileVersion and AssemblyInformationalVersion -->
    <Version Condition="'$(Version)' == ''">$(TPVersionPrefix)-dev</Version>

    <!-- Override the AssemblyVersion as 15.0.0 since protocol depends on this version for
         serialization. This is also defined in build script. -->
    <AssemblyVersion Condition="'$(AssemblyVersion)' == ''">15.0.0</AssemblyVersion>

    <!-- Treat warnings as errors only on CI to prevent painful development process because of unused usings... -->
    <TreatWarningsAsErrors Condition="'$(CIBuild)' == 'true'">true</TreatWarningsAsErrors>

    <PublicSign Condition="'$(CIBuild)' == '' or '$(CIBuild)' == 'false'">true</PublicSign>
    <DelaySign Condition="'$(CIBuild)' == 'true'">true</DelaySign>
    <!--<GenerateDocumentationFile>true</GenerateDocumentationFile>-->
    <AssemblyOriginatorKeyFile>$(TestPlatformRoot)scripts/key.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
    <GenerateAssemblyCompanyAttribute>false</GenerateAssemblyCompanyAttribute>
    <GenerateAssemblyProductAttribute>false</GenerateAssemblyProductAttribute>

    <!-- Disable default inclusion of .resx file. We generate files in the Resources directory only
         if localization is enabled, default inclusion ends up including the generated files by default. -->
    <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DefineConstants>$(DefineConstants);RELEASE</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DefineConstants>$(DefineConstants);CODE_ANALYSIS</DefineConstants>
  </PropertyGroup>

  <!-- Package dependency versions -->
  <Import Project="$(MSBuildThisFileDirectory)TestPlatform.Dependencies.props" Condition=" '$(DependencyVersionsImported)' != 'true' "/>

  <!-- Allows build of .NET Framework assemblies on MacOS and Linux https://github.com/dotnet/designs/pull/33#issuecomment-489264196 -->
  <ItemGroup>
    <PackageReference Condition=" '$(OS)' != 'Windows_NT' " Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup Condition=" '$(UseBannedApiAnalyzers)' == 'true' and '$(DotNetBuildFromSource)' != 'true' ">
    <PackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="$(RoslynBannedApiAnalyzersVersion)">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Include PublicApi analyzers into all projects that are in our src directory, this can't use TestProject == true
  because some projects in test and playground are not tests, but we don't want to analyze those for public apis, because
  we don't ship them.
  -->
  <Choose>
    <!-- Use relative path between the project and the root to avoid including the analyzer if the path above the root contains 'src' (e.g. C:\src\vstest). -->
    <When Condition="$([MSBuild]::MakeRelative($(TestPlatformRoot), $(MSBuildProjectFullPath)).StartsWith('src/')) OR $([MSBuild]::MakeRelative($(TestPlatformRoot), $(MSBuildProjectFullPath)).StartsWith('src\'))">
      <ItemGroup>
        <!-- We normally don't build against net6.0, so the public api analyzer errors would only appear in CI pipeline. -->
        <PackageReference Condition=" '$(DotNetBuildFromSource)' != 'true' " Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="$(RoslynPublicApiAnalyzersVersion)">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
      </ItemGroup>
    </When>
  </Choose>

  <!-- Test project settings -->
  <Choose>
    <When Condition="$(TestProject) == 'true'">
      <PropertyGroup>
        <GenerateDocumentationFile>false</GenerateDocumentationFile>
        <!-- Suppress warnings about testhost being x64 (AMD64)/x86 when imported into AnyCPU (MSIL) test projects. -->
        <NoWarn>$(NoWarn);MSB3270</NoWarn>
      </PropertyGroup>

      <!-- Test projects are not discovered in test window without test container capability -->
      <ItemGroup>
        <ProjectCapability Include="TestContainer" />
      </ItemGroup>

      <!-- Test project references -->
      <ItemGroup>
        <!-- Test projects take a direct dependency on TestHost. Indirect dependencies must be included.
             This is required to enable selfhost the latest testhost bits.

             We don't want these references to be passed onto compiler. They are just required at runtime.
             Mark them as content and copy to output directory.
        -->
        <ProjectReference Include="$(TestPlatformRoot)src/testhost/testhost.csproj">
          <FromP2P>true</FromP2P>
        </ProjectReference>
        <ProjectReference Include="$(TestPlatformRoot)src/Microsoft.TestPlatform.CommunicationUtilities/Microsoft.TestPlatform.CommunicationUtilities.csproj">
          <FromP2P>true</FromP2P>
        </ProjectReference>
        <ProjectReference Include="$(TestPlatformRoot)src/Microsoft.TestPlatform.CrossPlatEngine/Microsoft.TestPlatform.CrossPlatEngine.csproj">
          <FromP2P>true</FromP2P>
        </ProjectReference>
        <ProjectReference Include="$(TestPlatformRoot)src/Microsoft.TestPlatform.Common/Microsoft.TestPlatform.Common.csproj">
          <FromP2P>true</FromP2P>
        </ProjectReference>
        <ProjectReference Include="$(TestPlatformRoot)src/Microsoft.TestPlatform.ObjectModel/Microsoft.TestPlatform.ObjectModel.csproj">
          <FromP2P>true</FromP2P>
        </ProjectReference>

        <PackageReference Include="MSTest.TestFramework" Version="$(MSTestFrameworkVersion)" />
        <PackageReference Include="MSTest.TestAdapter" Version="$(MSTestAdapterVersion)" />
        <PackageReference Include="MSTest.Assert.Extensions" Version="$(MSTestAssertExtensionVersion)" />
        <PackageReference Include="Moq" Version="$(MoqVersion)" />
        <PackageReference Include="Microsoft.CodeCoverage" Version="$(MicrosoftCodeCoverageVersion)" />
      </ItemGroup>
    </When>
  </Choose>
</Project>
