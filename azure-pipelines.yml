# Pipeline YAML for PR

jobs:
- job: Windows
  timeoutInMinutes: 120
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    buildConfiguration: 'Release'
  steps:
  - task: BatchScript@1
    displayName: 'Run script build.cmd'
    inputs:
      filename: build.cmd
      arguments: '-verbose -configuration $(buildConfiguration) -steps "InstallDotnet, Restore, UpdateLocalization, Build, Publish"'
      modifyEnvironment: false
      failOnStandardError: true

  - task: CmdLine@1
    displayName: 'Delete stale pdb files'
    inputs:
      filename: del
      arguments: '/S /F *.pdb'
      workingFolder: '$(SystemRoot)'
    continueOnError: true
    condition: always()

  - task: BatchScript@1
    displayName: 'Run Unit Tests'
    inputs:
      filename: test.cmd
      arguments: '-verbose -configuration $(buildConfiguration)'
      modifyEnvironment: false
      failOnStandardError: true

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **\*.trx'
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**\*.trx'
    condition: succeededOrFailed()

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.SourcesDirectory)\artifacts'
      artifact: 'testArtifacts'
      publishLocation: 'pipeline'

- job: WindowsAcceptance
  dependsOn: Windows
  timeoutInMinutes: 120
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    buildConfiguration: 'Release'
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'testArtifacts'
      targetPath: '$(Build.SourcesDirectory)\artifacts'

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: 'ls "$(Build.SourcesDirectory)\artifacts\" -Recurse -Dir'

  - task: BatchScript@1
    displayName: 'Run script build.cmd'
    inputs:
      filename: build.cmd
      # build should not be needed in the end, we are copying the build task from the build folder, but we should get 
      # it either from artifacts, if present, or from extracted package file
      # Adding it at the moment to avoid this error: #[error]Copy-Item : Cannot find path 'D:\a\1\s\src\Microsoft.TestPlatform.Build\bin\Release\netstandard2.0' because it does  not exist.
      arguments: '-verbose -configuration $(buildConfiguration) -steps "InstallDotnet, Build, PrepareAcceptanceTests"'
      modifyEnvironment: false
      failOnStandardError: true
      
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: 'ls "$(Build.SourcesDirectory)\artifacts\Release\packages"'

  - task: BatchScript@1
    displayName: 'Run Acceptance Tests'
    inputs:
      filename: test.cmd
      arguments: '-verbose -configuration $(buildConfiguration) -p AcceptanceTests -f net451'
      modifyEnvironment: false
      failOnStandardError: true
      
  - task: BatchScript@1
    displayName: 'Run Platform Tests'
    inputs:
      filename: test.cmd
      arguments: '-verbose -configuration $(buildConfiguration) -p platformtests'
      modifyEnvironment: false
      failOnStandardError: true
            
  - task: BatchScript@1
    displayName: 'Run Smoke Tests'
    inputs:
      filename: test.cmd
      arguments: '-verbose -configuration $(buildConfiguration) -p smoke'
      modifyEnvironment: false
      failOnStandardError: true
      
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **\*.trx'
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**\*.trx'
    condition: succeededOrFailed()
    
- job: OtherOSes
  dependsOn: Windows
  workspace:
    clean: all
  strategy:
    matrix:
      Ubuntu_18_04:
        vmImage: ubuntu-18.04
        pwsh: true
      macOS_10_15_Catalina:
        vmImage: macOS-10.15
        pwsh: true
  pool:
    vmImage: $[ variables['vmImage'] ]
  variables:
      buildConfiguration: 'Release'
  steps:
  - script: ./build.sh -c $(buildConfiguration)
    displayName: 'Build'

  - script: ./test.sh -c $(buildConfiguration) -p Unit
    displayName: 'Unit tests'  

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'testArtifacts'
      targetPath: '$(Build.SourcesDirectory)/artifacts'

  - script: ./tools/dotnet-linux/dotnet build -c $(buildConfiguration) ./test/TestAssets/TestAssets.sln
    displayName: 'Build test assets'

  - script: ./test.sh -c $(buildConfiguration) -p Acceptance
    displayName: 'Acceptance tests'   
  
  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/*.trx'
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '**/*.trx'
    condition: succeededOrFailed()