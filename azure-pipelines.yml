# Branches that trigger a build on commit
trigger:
  branches:
    include:
    - main
    - rel/*
    exclude:
    - rel/15.*
    - rel/16.*
    - rel/17.0
    - rel/17.1
    - rel/17.2
    - rel/17.3
    - rel/17.4
    - rel/17.5
    - rel/17.6

# Branch(es) that trigger(s) build(s) on PR
pr:
  branches:
    include:
    - main
    - rel/*
  paths:
    exclude:
      - .github/*
      - .devcontainer/*
      - docs/*
      - .markdownlint.json
      - .markdownlintignore
      - CODE_OF_CONDUCT.md
      - CONTRIBUTING.md
      - README.md
      - SECURITY.md

variables:
  # Cannot use key:value syntax in root defined variables
  - name: _TeamName
    value: TestPlatformTeam
  - name: Codeql.Enabled
    value: true
  - name: _RunAsInternal
    value: False
  - name: _RunAsPublic
    value: True
  # Set default value for variables of PR and Public builds
  - name: _SignType
    value: test
  - name: _SignArgs
    value: ''
  - name: _Sign
    value: False
  - name: _InternalBuildArgs
    value: ' '
  - name: _ReleaseVersionKind
    value: ''
  # Arcade is using global cache of nugets in non-windows build
  # under some circumstances, but we don't respect that in our code and try to find them
  # in .packages. Force the location of packages to that folder.
  - name: NUGET_PACKAGES
    value: '$(Build.SourcesDirectory)/.packages/'

stages:

- stage: build
  displayName: Build
  jobs:

  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      enablePublishTestResults: true
      testResultsFormat: 'vstest'
      enableTelemetry: true
      enableSourceBuild: true
      jobs:
      - job: Windows
        timeoutInMinutes: 120
        pool:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2022.amd64.open
        strategy:
          matrix:
            Release:
              _BuildConfig: Release
        steps:
        # This steps help to understand versions of .NET runtime installed on the machine,
        # which is useful to diagnose some governance issues.
        - task: DotNetCoreCLI@2
          displayName: 'dotnet --info'
          inputs:
            command: custom
            custom: '--info'

        - powershell: eng\common\CIBuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_InternalBuildArgs)
            /p:Test=false
            /p:SourceBranchName=$(Build.SourceBranchName)
          name: Build
          displayName: Build

        # -ci is allowing to import some environment variables and some required configurations
        # -nobl avoid overwriting binlog of the main Build
        - script: Test.cmd
            -configuration $(_BuildConfig)
            -ci
            -nobl
            -integrationTest
            -performanceTest
          name: Test
          displayName: Test

        # This step is only helpful for diagnosing some issues with vstest/test host that would not appear
        # through the console or trx
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: TestResults
          condition: failed()

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Shipping Packages'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/Shipping'
            ArtifactName: PackageArtifacts

        - task: PublishBuildArtifacts@1
          displayName: 'Publish NonShippping Packages'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/NonShipping'
            ArtifactName: PackageArtifacts

        - task: PublishBuildArtifacts@1
          displayName: 'Publish VSSetup'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)'
            ArtifactName: VSSetupArtifacts

      - job: OtherOSes
        dependsOn: Windows
        workspace:
          clean: all
        variables:
          # Publish Logs seems to depend on this name of variable, so we define it
          # even when we don't use matrix.
          - name: _BuildConfig
            value: Release
        strategy:
          matrix:
            Ubuntu_22_04:
              vmImage: ubuntu-22.04
              pwsh: true
            macOS_11:
              vmImage: macOS-11
              pwsh: true
        pool:
          vmImage: $[ variables['vmImage'] ]
        steps:
        - checkout: self
          fetchDepth: 1
          clean: true

        # Build but don't pack, packing does not work on non-windows and we want to test what we built on Windows
        # anyway. Because that is what we will publish.
        - script: ./build.sh
            --configuration $(_BuildConfig)
            --ci
          name: Build
          displayName: Build

        # Download the built packages into local package source, as if we built them on this machine.
        - task: DownloadPipelineArtifact@2
          displayName: Download Package Artifacts
          inputs:
            artifactName: PackageArtifacts
            targetPath: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/Shipping'

        - script: ./test.sh
            --configuration $(_BuildConfig)
            --ci
            --integrationTest
            --performanceTest
          name: Test
          displayName: Test

        # This step is only helpful for diagnosing some issues with vstest/test host that would not appear
        # through the console or trx
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Test Results folders'
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            ArtifactName: TestResults
          condition: failed()

